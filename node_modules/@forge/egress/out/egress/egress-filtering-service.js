"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EgressFilteringService = void 0;
const tslib_1 = require("tslib");
const minimatch_1 = tslib_1.__importDefault(require("minimatch"));
const url_1 = require("url");
class EgressFilteringService {
    constructor(allowList) {
        this.URLs = allowList.filter((domainOrURL) => !domainOrURL.startsWith('*')).map((url) => this.safeURL(url));
        this.wildcardDomains = allowList
            .filter((domainOrURL) => domainOrURL !== '*')
            .map((url) => this.safeURL(url))
            .filter((url) => decodeURIComponent(url.hostname).startsWith('*'));
        this.allowsEverything = allowList.includes('*');
    }
    safeURL(url, defaultProtocol = 'https://') {
        const protocolRegex = /^(.*:\/\/)/;
        const urlParser = url_1.URL !== null && url_1.URL !== void 0 ? url_1.URL : window.URL;
        return new urlParser(protocolRegex.test(url) ? url : `${defaultProtocol}${url}`);
    }
    isValidUrl(url) {
        if (this.allowsEverything) {
            return true;
        }
        return this.domainIsAllowed(this.safeURL(url));
    }
    domainCheck(domain, allowList) {
        return allowList
            .filter((allowed) => allowed.protocol === domain.protocol)
            .some((url) => minimatch_1.default(domain.hostname, decodeURIComponent(url.hostname)));
    }
    domainIsAllowed(domain) {
        if (this.domainCheck(domain, this.URLs)) {
            return true;
        }
        if (this.domainCheck(domain, this.wildcardDomains)) {
            return true;
        }
        return false;
    }
}
exports.EgressFilteringService = EgressFilteringService;
