"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRuntime = exports.routeFromAbsolute = exports.assumeTrustedRoute = exports.route = exports.startsWith = exports.webTrigger = exports.properties = exports.storage = exports.store = exports.requestBitbucket = exports.requestConfluence = exports.requestJira = exports.fetch = exports.authorize = exports.asApp = exports.asUser = exports.privacy = void 0;
const storage_1 = require("@forge/storage");
const authorization_1 = require("./authorization");
Object.defineProperty(exports, "authorize", { enumerable: true, get: function () { return authorization_1.authorize; } });
const properties_1 = require("./properties");
const privacy_1 = require("./privacy");
const webTrigger_1 = require("./webTrigger");
Object.defineProperty(exports, "webTrigger", { enumerable: true, get: function () { return webTrigger_1.webTrigger; } });
const fetch_and_storage_1 = require("./runtime/fetch-and-storage");
function withDeprecatedMessage(method, message) {
    const wrappedMethod = (...args) => {
        console.warn(message);
        return method(...args);
    };
    return wrappedMethod;
}
const fetchAPI = (0, fetch_and_storage_1.getFetchAPI)();
const asUser = fetchAPI.asUser;
exports.asUser = asUser;
const asApp = fetchAPI.asApp;
exports.asApp = asApp;
const fetch = fetchAPI.fetch;
exports.fetch = fetch;
const requestJira = fetchAPI.requestJira;
exports.requestJira = requestJira;
const requestConfluence = fetchAPI.requestConfluence;
exports.requestConfluence = requestConfluence;
const requestBitbucket = fetchAPI.requestBitbucket;
exports.requestBitbucket = requestBitbucket;
const deprecatedPropertiesApi = Object.entries(properties_1.propertiesApi)
    .map(([name, method]) => {
    const wrappedMethod = withDeprecatedMessage(method, `store.${name}() is deprecated. Use properties.${name}() imported from '@forge/api' instead`);
    return {
        [name]: wrappedMethod
    };
})
    .reduce((acc, next) => Object.assign(acc, next), {});
const store = deprecatedPropertiesApi;
exports.store = store;
const storage = (0, storage_1.getStorageInstanceWithQuery)(new storage_1.GlobalStorage(fetch_and_storage_1.getContextAri, (0, fetch_and_storage_1.createRequestStargateAsApp)()));
exports.storage = storage;
const properties = properties_1.propertiesApi;
exports.properties = properties;
const API = Object.assign(Object.assign({}, fetchAPI), { store: Object.assign({}, store) });
exports.privacy = {
    reportPersonalData: (0, privacy_1.createReportPersonalData)((_a = global.api) === null || _a === void 0 ? void 0 : _a.asApp().__requestAtlassian)
};
exports.default = API;
var storage_2 = require("@forge/storage");
Object.defineProperty(exports, "startsWith", { enumerable: true, get: function () { return storage_2.startsWith; } });
var safeUrl_1 = require("./safeUrl");
Object.defineProperty(exports, "route", { enumerable: true, get: function () { return safeUrl_1.route; } });
Object.defineProperty(exports, "assumeTrustedRoute", { enumerable: true, get: function () { return safeUrl_1.assumeTrustedRoute; } });
Object.defineProperty(exports, "routeFromAbsolute", { enumerable: true, get: function () { return safeUrl_1.routeFromAbsolute; } });
var runtime_1 = require("./api/runtime");
Object.defineProperty(exports, "getRuntime", { enumerable: true, get: function () { return runtime_1.getRuntime; } });
